package com.lojaGames.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.lojaGames.model.Categoria;
import com.lojaGames.repository.CategoriaRepository;

@RestController
@RequestMapping("/categorias")
@CrossOrigin (origins = "*", allowedHeaders = "*")
public class CategoriaController {
	
	@Autowired
	private CategoriaRepository categoriaRepository;
	
	
	@GetMapping
	public ResponseEntity <List<Categoria>> getAll() {
	
		return ResponseEntity.ok(categoriaRepository.findAll());
		
	}
	
	@GetMapping("/{id")
	public ResponseEntity <Categoria> getById (@PathVariable Long id) {
		
		return categoriaRepository.findById(id)
				.map(resposta -> ResponseEntity.ok(resposta))
				.orElse(ResponseEntity.notFound().build());
	
		
	}
	
	
	@GetMapping("/descricao/{descricao}")
	public ResponseEntity <List<Categoria>> getByDescricao(@PathVariable String descricao) { // resposta HTTP

		return ResponseEntity.ok(categoriaRepository.findAllByDescricaoContainingIgnoreCase(descricao));

	}
	

	// postar
	@PostMapping
	public ResponseEntity<Tema> postTema(@Valid @RequestBody Tema tema) {
		return ResponseEntity.status(HttpStatus.CREATED).body(temaRepository.save(tema));

	}

	// atualizar
	@PutMapping
	public ResponseEntity<Tema> putTema(@Valid @RequestBody Tema tema) {

		
		return temaRepository.findById(tema.getId()) 
				.map(resposta -> ResponseEntity.status(HttpStatus.OK) 
						.body(temaRepository.save(tema))) 
				.orElse(ResponseEntity.notFound().build()); 
	
	}
	
	
	// deletar
	@ResponseStatus(HttpStatus.NO_CONTENT)
	@DeleteMapping("/{id}")
	public void deleteTema(@PathVariable Long id) {
		
		
		Optional <Tema> recebeidTema = temaRepository.findById(id);
				
		if (recebeidTema.isEmpty())
			throw new ResponseStatusException(HttpStatus.NOT_FOUND);
		
		temaRepository.deleteById(id);
		
		
		
	}

}

	


	
	
	

}
